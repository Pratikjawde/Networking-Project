# name: CI/CD Pipeline

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Python
#       uses: actions/setup-python@v2
#       with:
#         python-version: '3.8'

#     - name: Install dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install -r project/application/requirements.txt

#     - name: Run tests
#       run: |
#         # Add your test commands here
#         echo "Running tests..."

#     - name: Build Docker image
#       run: |
#         docker build -t sample-app project/application/

#     - name: Log in to AWS ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         AWS_REGION: eu-west-1
#     - name: Ensure ECR Repository Exists
#       run: |
#         aws ecr describe-repositories --repository-names sample-app --region eu-west-1 || \
#         aws ecr create-repository --repository-name sample-app --region eu-west-1
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#     - name: Build, tag, and push image to ECR
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: sample-app
#         IMAGE_TAG: latest
#       run: |
#         docker tag sample-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Terraform
#       uses: hashicorp/setup-terraform@v1

#     - name: Terraform Init
#       run: terraform init
#       working-directory: project/infrastructure/

#     - name: Terraform Apply
#       run: terraform apply -auto-approve
#       working-directory: project/infrastructure/
#       env:
#         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#     - name: Install Ansible
#       run: |
#         sudo apt-get update
#         sudo apt-get install -y ansible
        
#     - name: Fix SSH Key Permissions
#       run: chmod 600 project/infrastructure/new
      
#     - name: Checkout repository
#       uses: actions/checkout@v3

#     - name: Debug - Check files before copying
#       run: ls -R project/
      
#     # - name: Copy application files to the target host
#     #     ansible.builtin.copy:
#     #       src: "{{ playbook_dir }}/../../application/"
#     #       dest: "/home/ec2-user/application/"
#     #       owner: ec2-user
#     #       group: ec2-user
#     #       mode: '0755'



#     - name: Run Ansible playbook
#       run: ansible-playbook -i project/configuration/hosts project/configuration/playbook.yml
#       env:
#         ANSIBLE_HOST_KEY_CHECKING: 'false'
#         ANSIBLE_PRIVATE_KEY_FILE: ${{ secrets.ANSIBLE_PRIVATE_KEY_FILE }}
#         ANSIBLE_USER: ec2-user

name:CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    name: CI/CD Pipeline
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r project/application/requirements.txt

    - name: Run tests
      run: |
        # Add your test commands here
        echo "Running tests..."

    - name: Build Docker image
      run: |
        docker build -t sample-app project/application/

    - name: Log in to AWS ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: eu-west-1
        
    - name: Ensure ECR Repository Exists
      run: |
        aws ecr describe-repositories --repository-names sample-app --region eu-west-1 || \
        aws ecr create-repository --repository-name sample-app --region eu-west-1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Build, tag, and push image to ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: sample-app
        IMAGE_TAG: latest
      run: |
        docker tag sample-app:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Build and push Docker image
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/app:project-333 Docker/
        docker push ${{ secrets.DOCKER_USERNAME }}/app:project-333
        
  deploy:
    runs-on: ubuntu-latest
    needs: build  # Ensure the build job is completed before deployment

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check working directory
      run: pwd

    - name: Set up SSH connection and deploy to EC2
      run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" | tr -d '\r' > aws_key_333
          chmod 600 aws_key_333

          # Sync the updated files from GitHub to EC2 instance
          scp -i aws_key_333 -o StrictHostKeyChecking=no -r ./Docker ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/app/

          ssh -i aws_key_333 -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            # Navigate to the updated directory inside EC2
            cd /home/ec2-user/app/Docker

            # Stop and remove the existing Docker container
            docker stop project-333 || true
            docker rm project-333 || true

            # Remove old Docker image
            docker rmi project-333:latest || true

            # Build a fresh Docker image from updated files inside EC2
            docker build --no-cache -t project-333:latest .

            # Run the updated Docker container
            docker run -d -p 80:80 --name project-333 project-333:latest
          EOF

